# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

[project]
name = "lftools-ng"
version = "0.1.0"
description = "Next-generation Linux Foundation Release Engineering Tools"
authors = [
    {name = "LF Release Engineering", email = "releng@linuxfoundation.org"},
    {name = "Matthew Watkins", email = "93649628+ModeSevenIndustrialSolutions@users.noreply.github.com"},
]
dependencies = [
    "typer>=0.15.2",
    "python-jenkins>=1.8.2",
    "requests>=2.32.0",
    "pyyaml>=6.0.1",
    "httpx>=0.27.0",
    "rich>=13.7.1",
    "click>=8.1.7",
    "beautifulsoup4>=4.13.4",
]
requires-python = "<3.14,>=3.10"
readme = "README.md"
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

[project.urls]
Homepage = "https://github.com/ModeSevenIndustrialSolutions/lftools-ng"
Documentation = "https://github.com/ModeSevenIndustrialSolutions/lftools-ng"
Repository = "https://github.com/ModeSevenIndustrialSolutions/lftools-ng.git"
"Bug Tracker" = "https://github.com/ModeSevenIndustrialSolutions/lftools-ng/issues"

[project.scripts]
lftools-ng = "lftools_ng.cli:app"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[dependency-groups]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.25.0",
    "coverage>=7.7.1",
    "httpx>=0.27.0",
]
tox = [
    "tox>=4.24.2",
    "tox-pdm>=0.7.2",
]
lint = [
    "pre-commit>=4.2.0",
    "mypy>=1.13.0",
    "types-requests>=2.32.0",
    "types-PyYAML>=6.0.12",
]
docs = [
    "sphinx>=8.2.3",
    "sphinx-copybutton>=0.5.2",
    "sphinx-autodoc-typehints>=2.4.4",
]
dev = [
    "ipython>=8.29.0",
    "ipdb>=0.13.13",
    "mypy>=1.10.0",
    "types-PyYAML>=6.0.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=lftools_ng",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "-m not integration",  # Skip integration tests by default
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests that require external resources (skipped by default, run with 'pytest -m integration')",
]

[tool.coverage.run]
source = ["src/lftools_ng"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped defs for Typer decorators
no_implicit_optional = true
explicit_package_bases = true
mypy_path = "src"
namespace_packages = true
packages = ["lftools_ng"]

[[tool.mypy.overrides]]
module = "lftools_ng.commands.*"
disable_error_code = ["misc"]

[[tool.mypy.overrides]]
module = "lftools_ng.cli"
disable_error_code = ["misc"]

[[tool.mypy.overrides]]
module = "lftools_ng.commands.jenkins"
ignore_errors = true

[[tool.mypy.overrides]]
module = "lftools_ng.core.filters"
ignore_errors = true

[[tool.mypy.overrides]]
module = "lftools_ng.core.output"
ignore_errors = true

# Ignore untyped imports for third-party libraries without stubs
[[tool.mypy.overrides]]
module = "jenkins.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["lftools_ng"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018"]
